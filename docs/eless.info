This is eless.info, produced by makeinfo version 5.2 from eless.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Eless: (eless).       Use emacs view-mode as less.
END-INFO-DIR-ENTRY


File: eless.info,  Node: Top,  Next: Readme,  Up: (dir)

eless – A Better less
*********************

* Menu:

* Readme::
* Eless Options::
* ‘view-mode’ Common Bindings::
* Custom Bindings::
* Usage Examples::
* Current ‘eless’ Version::
* Code::
* Contributing::
* Other Wikis::

— The Detailed Node Listing —

Readme

* Requirements::
* Try it out::
* Contributors::

Code

* Unofficial Bash Strict Mode::
* Initialize variables::
* Cleanup using ‘trap’::
* Debug function::
* Input/Output Detection::
* Parse options::
* Print Help::
* Emacs with ‘-Q’ in ‘view-mode’::
* Input/Output Scenarios::
* Eval::
* Emacs Configuration::

Input/Output Scenarios

* Output is going to a pipe::
* Output is going to _stdout_, Input is coming from a pipe: Output is going to _stdout_ Input is coming from a pipe.
* Output is going to _stdout_, Input is an argument to the script: Output is going to _stdout_ Input is an argument to the script.

Output is going to _stdout_, Input is coming from a pipe

* Input is piped from ‘man’ command::
* Input is piped from a ‘modules’ help in _IPython_::
* Input is piped from ‘info’ command::
* Input is piped from something else::

Emacs Configuration

* General setup::
* Ido setup::
* Isearch setup::
* Enable line truncation::
* Highlight the current line::
* Custom functions::
* Auto-setting of major modes::
* Key bindings::
* User config override::

Custom functions

* Keep/delete matching lines::
* Frame and font re-sizing::
* Revert buffer in ‘view-mode’::
* Detect if ‘diff-mode’ should be enabled::
* Detect if ANSI codes need to be converted to colors::
* ``Do The Right Thing'' Kill::
* ‘dired-mode’ setup::
* ‘Man-mode’ setup::
* ‘Info-mode’ setup::
* ‘tar-mode’ setup::

Contributing

* How to help debug::
* Development::

Development

* Preparation::
* To build ‘eless’ and documentation::
* To build documentation::
* Submitting PR::

To build ‘eless’ and documentation

* Sanity check of the tangled ‘eless’::

To build documentation

* Understand the changes::

Other Wikis

* Home::
* Example ‘eless’ config in ‘tcsh’::



File: eless.info,  Node: Readme,  Next: Eless Options,  Prev: Top,  Up: Top

1 Readme
********

*ShellCheck Status*:
https://travis-ci.org/kaushalmodi/eless.svg?branch=master
(https://travis-ci.org/kaushalmodi/eless)

   *Documentation*: Org exported HTML
(https://kaushalmodi.github.io/eless/) | Wiki
(https://github.com/kaushalmodi/eless/wiki)

   ‘eless’ is a combination of Bash script and a minimal emacs
‘view-mode’ config.

   This script is designed to:

   • Be portable – Just one bash script to download to run
   • Be independent of a user’s emacs config
        • _You can still customize
          (https://github.com/kaushalmodi/eless/wiki/Code-Explanation#user-config-override)
          the ‘eless’ config if you like._
   • Not require an emacs server to be already running

   It was created out of a need to have something _like_ ‘less’ (in the
sense of _launch quickly, do, and quit_, but _better_ in these ways:

   • Syntax highlighting
   • Org-mode file rendering
   • A better navigable man page viewer
   • A better Info viewer
   • Dired, especially ‘wdired’ (batch edit symbolic links, for
     example?)
   • Colored diffs, ‘git diff’, ‘git log’, ‘ls’, etc.  (auto ANSI
     detection)
   • Filter log files to only show (or not show) lines matching a regexp
   • Auto-revert log files when I want (like ‘tail -f’)
   • Quickly change frame and font sizes
   • ..  and more; basically everything that emacs has to offer!

   I call it ‘eless’ and here’s a little taste of what it looks like:

   https://raw.githubusercontent.com/kaushalmodi/eless/master/docs/images/eless-examples.png
(https://raw.githubusercontent.com/kaushalmodi/eless/master/docs/images/eless-examples.png)

   _Shown above, starting from top left image and proceeding
clock-wise.._
   • ‘eless eless.org’
   • ‘rg --color=ansi 'man pages' | eless’ (rg?
     (https://github.com/BurntSushi/ripgrep))
   • ‘man grep’ (I have set my ‘PAGER’ env var to ‘eless’.)
   • ‘info eless’ (I have aliased ‘info’ to ‘'\info \!* | eless'’ in my
     tcsh shell.)
   • ‘eless .’ (Shows the current directory contents in ‘dired’.)
   • ‘diff’ of ‘eless.org’ with an older saved version and piping the
     result to ‘eless’

   As a bonus:

   • This script passes ShellCheck (http://www.shellcheck.net), and
   • Unofficial Bash strict mode
     (http://redsymbol.net/articles/unofficial-bash-strict-mode) is
     enabled.
   • Always-in-sync documentation as the ‘eless’ script and
     documentation are generated using Org Babel from one file
     (https://github.com/kaushalmodi/eless/blob/master/eless.org) (even
     this README).

* Menu:

* Requirements::
* Try it out::
* Contributors::


File: eless.info,  Node: Requirements,  Next: Try it out,  Up: Readme

1.1 Requirements
================

   • This is a ‘bash’ script.  So even if you don’t use ‘bash’ shell,
     you need to have the ‘bash’ binary discoverable through your
     environment variable ‘PATH’.
        • Tested to work in ‘tcsh’ shell (_I know_) on RHEL 6.6.
   • *GNU ‘grep’* for ‘-P’ flag (Perl regex) support
        • Tested to work with GNU ‘grep’ 2.6.3 on RHEL 6.6.
        • Mac OS users would need to install GNU ‘grep’ using ‘brew
          install’ (https://apple.stackexchange.com/a/193300).


File: eless.info,  Node: Try it out,  Next: Contributors,  Prev: Requirements,  Up: Readme

1.2 Try it out
==============

Here are some usage examples:
     eless foo.txt               # Open foo.txt in eless in terminal (-nw) mode by default.
     eless foo.txt --gui         # Open foo.txt in eless in GUI mode.
     echo 'foo' | eless          #
     echo 'foo' | eless -        # Same as above. The hyphen after eless does not matter; is anyways discarded.
     grep 'bar' foo.txt | eless  #
     PAGER=eless man grep        # Launches man pages in eless (terminal mode), if the environment variable PAGER is set to eless.
     PAGER=eless man grep --gui  # Launches man pages in eless (GUI mode), if the environment variable PAGER is set to eless.
     diff foo bar | eless        # Colored diff!
     diff -u foo bar | eless     # Colored diff for unified diff format
     eless .                     # Open dired in the current directory (enhanced 'ls')
     ls --color=always | eless   # Auto-detect ANSI color codes and convert those to colors
     PAGER=eless git diff        # Show git diff with ANSI coded colors
     eless -h | eless            # See eless help ;-)
     info emacs | eless          # Read emacs Info manual in eless
     eless foo.tar.xz            # Read the contents of archives; emacs does the unarchiving automatically


File: eless.info,  Node: Contributors,  Prev: Try it out,  Up: Readme

1.3 Contributors
================

   • Thanks to Iqbal Ansari (https://github.com/iqbalansari) for adding
     support to read piped data in ‘emacs -Q -nw’.
   • Thanks to Adam Porter (https://github.com/alphapapa) for adding a
     ‘bash’ _collapsing function_ for debug statements, and testing out
     and providing suggestions on improving the ‘eless’ build flow.


File: eless.info,  Node: Eless Options,  Next: ‘view-mode’ Common Bindings,  Prev: Readme,  Up: Top

2 Eless Options
***************

Option   Description
------------------------------------
-h       Show this help and quit
–gui     Run emacs in GUI mode
-V       Print version and quit
-D       Run with debug messages


File: eless.info,  Node: ‘view-mode’ Common Bindings,  Next: Custom Bindings,  Prev: Eless Options,  Up: Top

3 ‘view-mode’ Common Bindings
*****************************

Binding        Description
----------------------------------------------------------------------------------------------
SPC            Scroll forward ’page size’ lines.  With prefix scroll forward prefix lines.
DEL or S-SPC   Scroll backward ’page size’ lines.  With prefix scroll backward prefix
               lines.
               (If your terminal does not support this, use xterm instead or using C-h.)
RET            Scroll forward one line.  With prefix scroll forward prefix line(s).
y              Scroll backward one line.  With prefix scroll backward prefix line(s).
s              Do forward incremental search.
r              Do reverse incremental search.
e              Quit the ’view-mode’ and use that emacs session as usual to modify
               the opened file if needed.


File: eless.info,  Node: Custom Bindings,  Next: Usage Examples,  Prev: ‘view-mode’ Common Bindings,  Up: Top

4 Custom Bindings
*****************

Binding        Description
----------------------------------------------------------------------------
!  or K        Delete lines matching regexp
& or k         Keep lines matching regexp
0              Delete this window
1              Keep only this window
A              Auto-revert Tail Mode (like tail -f on current buffer)
D              Dired
N              Next error (next line in *occur*)
P              Previous error (previous line in *occur*)
a              Auto-revert Mode
g or F5        Revert buffer (probably after keep/delete lines)
n              Next line
o              Occur
p              Previous line
q              Quit emacs if at most one buffer is open, else kill buffer
t              Toggle line truncation
= or + or -    Adjust font size (in GUI mode)
C-down/up      Inc/Dec frame height (in GUI mode)
C-right/left   Inc/Dec frame width (in GUI mode)


File: eless.info,  Node: Usage Examples,  Next: Current ‘eless’ Version,  Prev: Custom Bindings,  Up: Top

5 Usage Examples
****************

     eless foo.txt               # Open foo.txt in eless in terminal (-nw) mode by default.
     eless foo.txt --gui         # Open foo.txt in eless in GUI mode.
     echo 'foo' | eless          #
     echo 'foo' | eless -        # Same as above. The hyphen after eless does not matter; is anyways discarded.
     grep 'bar' foo.txt | eless  #
     PAGER=eless man grep        # Launches man pages in eless (terminal mode), if the environment variable PAGER is set to eless.
     PAGER=eless man grep --gui  # Launches man pages in eless (GUI mode), if the environment variable PAGER is set to eless.
     diff foo bar | eless        # Colored diff!
     diff -u foo bar | eless     # Colored diff for unified diff format
     eless .                     # Open dired in the current directory (enhanced 'ls')
     ls --color=always | eless   # Auto-detect ANSI color codes and convert those to colors
     PAGER=eless git diff        # Show git diff with ANSI coded colors
     eless -h | eless            # See eless help ;-)
     info emacs | eless          # Read emacs Info manual in eless
     eless foo.tar.xz            # Read the contents of archives; emacs does the unarchiving automatically
NOTE
     Above examples are tested to work in a *‘bash’ shell*.
     Specifically, examples like ‘PAGER=eless man grep’ will need to be
     adapted for the shell you are using.


File: eless.info,  Node: Current ‘eless’ Version,  Next: Code,  Prev: Usage Examples,  Up: Top

6 Current ‘eless’ Version
*************************

     master

     c2e320f
   This commit hash was retrieved before (obviously) the commit was made
where you see this.  So if you see a commit hash when checking ‘eless’
version, it would always refer to the one-earlier commit.


File: eless.info,  Node: Code,  Next: Contributing,  Prev: Current ‘eless’ Version,  Up: Top

7 Code
******

* Menu:

* Unofficial Bash Strict Mode::
* Initialize variables::
* Cleanup using ‘trap’::
* Debug function::
* Input/Output Detection::
* Parse options::
* Print Help::
* Emacs with ‘-Q’ in ‘view-mode’::
* Input/Output Scenarios::
* Eval::
* Emacs Configuration::


File: eless.info,  Node: Unofficial Bash Strict Mode,  Next: Initialize variables,  Up: Code

7.1 Unofficial Bash Strict Mode
===============================

The _Unofficial Bash Strict Mode_
(http://redsymbol.net/articles/unofficial-bash-strict-mode/) is enabled
to make this script more robust and reliable.

   The script will error out immediately when,
  1. Any command in a pipeline in this code fails.
          set -o pipefail
  2. Any line in this script returns an error
          set -e # Error out and exit the script when any line in this script returns an error
  3. Any undefined variable is referenced.
          set -u # Error out when unbound variables are found


File: eless.info,  Node: Initialize variables,  Next: Cleanup using ‘trap’,  Prev: Unofficial Bash Strict Mode,  Up: Code

7.2 Initialize variables
========================

     help=0
     debug=0
     no_window_arg="-nw"
     emacs_args=("${no_window_arg}") # Run emacs with -nw by default
     piped_data=''
     tempfile=''
     cmd=''

     input_from_pipe_flag=0
     output_to_pipe_flag=0


File: eless.info,  Node: Cleanup using ‘trap’,  Next: Debug function,  Prev: Initialize variables,  Up: Code

7.3 Cleanup using ‘trap’
========================

The below ‘cleanup’ function is auto-executed via Bash ‘trap’ when the
script exits _for any reason_.  Read this post on _redsymbol.net_
(http://redsymbol.net/articles/bash-exit-traps/) for more information.
     # http://redsymbol.net/articles/bash-exit-traps/
     function cleanup {
         if [[ ! -z "${tempfile}" ]] && [[ ${debug} -eq 0 ]]
         then
             rm -f "${tempfile}"
         fi
     }
     trap cleanup EXIT


File: eless.info,  Node: Debug function,  Next: Input/Output Detection,  Prev: Cleanup using ‘trap’,  Up: Code

7.4 Debug function
==================

This function redefines itself the first time it is called.  When
debugging is enabled, it defines itself as a function which outputs to
STDERR, then calls itself to do the first output.  When debugging is
disabled, it defines itself as a function that does nothing, so
subsequent calls do not output.
     function debug {
         if [[ $debug -eq 1 ]]
         then
             function debug {
                 echo -e "DEBUG: $*" >&2
             }
             debug "$@"
         else
             function debug {
                 true
             }
         fi
     }
   Above is a ‘bash’ _collapsing function_.  See here
(http://wiki.bash-hackers.org/howto/collapsing_functions) and here
(https://github.com/kaushalmodi/eless/issues/13) for more info.  If user
has passed the ‘-D’ option, run the script in debug mode.

     for var in "$@"
     do
         if [[ "${var}" == '-D' ]]
         then
             eless_print_version
             debug=1
         fi
     done


File: eless.info,  Node: Input/Output Detection,  Next: Parse options,  Prev: Debug function,  Up: Code

7.5 Input/Output Detection
==========================

We need this script to know:
   • Where it is getting the input from:
        • From the terminal?
                   eless foo
        • From a pipe?
                   diff a b | eless
   • Where the output is going to:
        • To the terminal?
                   eless foo
        • To a pipe?
                   eless | grep foo
          In this case, we do not do anything at the moment.  See here
          (https://github.com/kaushalmodi/eless/issues/4).

   Below code determines that using ‘[[ -t 0 ]]’ and ‘[[ -t 1]]’.
     # https://gist.github.com/davejamesmiller/1966557
     if [[ -t 0 ]] # Script is called normally - Terminal input (keyboard) - interactive
     then
         # eless foo
         # eless foo | cat -
         debug "--> Input from terminal"
         input_from_pipe_flag=0
     else # Script is getting input from pipe or file - non-interactive
         # echo bar | eless foo
         # echo bar | eless foo | cat -
         piped_data="$(cat)"
         debug "--> Input from pipe/file"
         input_from_pipe_flag=1
     fi

     # http://stackoverflow.com/a/911213/1219634
     if [[ -t 1 ]] # Output is going to the terminal
     then
         # eless foo
         # echo bar | eless foo
         debug "    Output to terminal -->"
         output_to_pipe_flag=0
     else # Output is going to a pipe, file?
         # eless foo | cat -
         # echo bar | eless foo | cat -
         debug "    Output to a pipe -->"
         output_to_pipe_flag=1
     fi


File: eless.info,  Node: Parse options,  Next: Print Help,  Prev: Input/Output Detection,  Up: Code

7.6 Parse options
=================

We need to parse the arguments such that arguments specific to this
script like ‘-D’ and ‘--gui’ get consumed here, and the ones not known
to this script get passed to ‘emacs’.

   ‘getopt’ does not support ignoring undefined options.  So the below
basic approach of looping through all the arguments ‘"$@"’ is used.
     for var in "$@"
     do
         debug "var : $var"

         if [[ "${var}" == '-D' ]]
         then
             : # Put just a colon to represent null operation # https://unix.stackexchange.com/a/133976/57923
               # Do not pass -D option to emacs.
         elif [[ "${var}" == '-V' ]]
         then
             eless_print_version
             exit 0
         elif [[ "${var}" == '-' ]]
         then
             : # Discard the '-'; it does nothing. (for the cases where a user might do "echo foo | eless -")
         elif [[ "${var}" == '-nw' ]]
         then
             : # Ignore the user-passed "-nw" option; we are adding it by default.
         elif [[ "${var}" == '-h' ]]  # Do not hijack --help; use that to show emacs help
         then
             help=1
         elif [[ "${var}" == '--gui' ]]
         then
             # Delete the ${no_window_arg} from ${emacs_args[@]} array if user passed "--gui" option
             # http://stackoverflow.com/a/16861932/1219634
             emacs_args=("${emacs_args[@]/${no_window_arg}}")
         else
             # Collect all other arguments passed to eless and forward them to emacs.
             emacs_args=("${emacs_args[@]}" "${var}")
         fi
     done


File: eless.info,  Node: Print Help,  Next: Emacs with ‘-Q’ in ‘view-mode’,  Prev: Parse options,  Up: Code

7.7 Print Help
==============

If user asked for this script’s help, just print it and exit with
success code.
     if [[ ${help} -eq 1 ]]
     then
         eless_print_version
         echo "${h}"
         exit 0
     fi


File: eless.info,  Node: Emacs with ‘-Q’ in ‘view-mode’,  Next: Input/Output Scenarios,  Prev: Print Help,  Up: Code

7.8 Emacs with ‘-Q’ in ‘view-mode’
==================================

The ‘emacs_Q_view_mode’ function is defined to launch emacs with a
customized ‘view-mode’.

   _Refer to further sections below to see the elisp code referenced by
the ‘<<emacs-config>>’ *noweb* placeholder in the *note Emacs
Configuration:: section._

     function emacs_Q_view_mode {

         # Here $@ is the list of arguments passed specifically to emacs_Q_view_mode,
         # not to eless.
         debug "Args passed to emacs_Q_view_mode : $*"

         emacs -Q "$@" \
               --eval '(progn
                         <<emacs-config>>
                       )' 2>/dev/null </dev/tty
     }


File: eless.info,  Node: Input/Output Scenarios,  Next: Eval,  Prev: Emacs with ‘-Q’ in ‘view-mode’,  Up: Code

7.9 Input/Output Scenarios
==========================

We saw in section *note Input/Output Detection:: how we detected if
input was coming from the _pipe_ or _stdin_ and if output was going to a
_pipe_ or _stdout_.  Now we make use of that information to call the
‘emacs_Q_view_mode’ function with the right arguments.
     # Below if condition is reached if you try to do this:
     #   eless foo.txt | grep bar .. Not allowed!
     if [[ ${output_to_pipe_flag} -eq 1 ]]
     then
         <<output-pipe>>
     else
         # Below if condition is reached when you do this:
         #   grep 'foo' bar.txt | eless, or
         #   grep 'foo' bar.txt | eless -
         # i.e. Input to eless is coming through a pipe (from grep, in above example)
         if [[ ${input_from_pipe_flag} -eq 1 ]]
         then
             <<output-stdout--input-pipe>>
             # Below else condition is reached when you do this:
             #   eless foo.txt
         else
             <<output-stdout--input-stdin>>
         fi
     fi

* Menu:

* Output is going to a pipe::
* Output is going to _stdout_, Input is coming from a pipe: Output is going to _stdout_ Input is coming from a pipe.
* Output is going to _stdout_, Input is an argument to the script: Output is going to _stdout_ Input is an argument to the script.


File: eless.info,  Node: Output is going to a pipe,  Next: Output is going to _stdout_ Input is coming from a pipe,  Up: Input/Output Scenarios

7.9.1 Output is going to a pipe
-------------------------------

This scenario is not supported at the moment.  There is a plan to
support it in future (https://github.com/kaushalmodi/eless/issues/4)
though.

   For now, the ‘eless’ script will exit with an error code if the
output is being piped to something else.
     echo "This script is not supposed to send output to a pipe"
     exit 1


File: eless.info,  Node: Output is going to _stdout_ Input is coming from a pipe,  Next: Output is going to _stdout_ Input is an argument to the script,  Prev: Output is going to a pipe,  Up: Input/Output Scenarios

7.9.2 Output is going to _stdout_, Input is coming from a pipe
--------------------------------------------------------------

‘mktemp’ requires the ‘-t’ argument to specify the temporary file name
template on Mac OS (See ‘eless’ issue #18
(https://github.com/kaushalmodi/eless/issues/18).)

   *Note to Mac OS users*: Using the *GNU ‘grep’* version of ‘grep’ is a
requirement for ‘eless’ to work on your systems (for the ‘-P’ (Perl
regex) support).
     tempfile="$(mktemp -t emacs-stdin-"$USER".XXXXXXX)" # https://github.com/koalaman/shellcheck/wiki/SC2086
     debug "Temp File : $tempfile"
     echo "${piped_data}" > "${tempfile}" # https://github.com/koalaman/shellcheck/wiki/SC2086

     # Parse the first line of the piped data to check if it's a man page
     first_line_piped_data=$(head -n 1 "${tempfile}")
     debug "first_line_piped_data = ${first_line_piped_data}"

     # The first line of man pages is assumed to be
     #   FOO(1)  optional something something FOO(1)
     # It is not mandatory for the below grep to always pass, so OR it with
     # "true" so that "set -e" does not kill the script at this point.
     # For some odd reason, the "BASH_BUILTINS" man page is just "builtins", so
     # deal with that corner case.. faced this when trying to do "man read".
     man_page=$(echo "${first_line_piped_data}" \
                    | grep -Po '^([A-Za-z-_]+\([0-9]+\))(?=\s+.*?\1$)' \
                    | sed -r 's/bash_builtins/builtins/I' \
                    || true)

     # The first line of Python package MODULE help is assumed to be
     #   Help on package MODULE:
     python_module_help=$(echo "${first_line_piped_data}" \
                              | grep -Po '^Help on package \K(.*)(?=:$)' \
                              || true)

     # The first line of info manuals is assumed to be
     #   /path/to/some.info or /path/to/some.info.gz
     # It is not mandatory for the below grep to always pass, so OR it with
     # "true" so that "set -e" does not kill the script at this point.
     info_man=$(echo "${first_line_piped_data}" \
                    | grep -Po '^(.*/)*\K[^/]+(?=\.info(\-[0-9]+)*(\.gz)*$)' \
                    || true)

     if [[ ! -z ${man_page} ]]
     then
         <<man-page>>
     elif [[ ! -z ${python_module_help} ]]
     then
         <<python-module-help>>
     elif [[ ! -z ${info_man} ]]
     then
         <<info-manual>>
     else # No man page or info manual detected
         <<neither-man-nor-info>>
     fi

* Menu:

* Input is piped from ‘man’ command::
* Input is piped from a ‘modules’ help in _IPython_::
* Input is piped from ‘info’ command::
* Input is piped from something else::


File: eless.info,  Node: Input is piped from ‘man’ command,  Next: Input is piped from a ‘modules’ help in _IPython_,  Up: Output is going to _stdout_ Input is coming from a pipe

7.9.2.1 Input is piped from ‘man’ command
.........................................

     # After setting PAGER variable to eless, try something like `man grep'.
     # That will launch the man page in eless.
     debug "Man Page = ${man_page}"

     cmd="emacs_Q_view_mode \
                  ${emacs_args[*]} \
                  --eval '(progn
                            (man (downcase \"${man_page}\"))
                            ;; Below workaround is only for emacs 24.5.x and older releases
                            ;; where the man page takes some time to load.
                            ;; 1-second delay before killing the *scratch* window
                            ;; seems to be sufficient
                            (when (version<= emacs-version \"24.5.99\")
                               (sit-for 1))
                            (delete-window))'"
   The ‘sit-for’ hack is needed for emacs versions older than 25.x.  It
was reported in this issue
(https://github.com/kaushalmodi/eless/issues/3).


File: eless.info,  Node: Input is piped from a ‘modules’ help in _IPython_,  Next: Input is piped from ‘info’ command,  Prev: Input is piped from ‘man’ command,  Up: Output is going to _stdout_ Input is coming from a pipe

7.9.2.2 Input is piped from a ‘modules’ help in _IPython_
.........................................................

     debug "Python Module = ${python_module_help}"

     cmd="emacs_Q_view_mode \
                  ${emacs_args[*]} \
                  --eval '(progn
                            (man \"${tempfile}\")
                            ;; Below workaround is only for emacs 24.5.x and older releases
                            ;; where the man page takes some time to load.
                            ;; 1-second delay before killing the *scratch* window
                            ;; seems to be sufficient
                            (when (version<= emacs-version \"24.5.99\")
                               (sit-for 1))
                            (delete-window)
                            (rename-buffer \"${python_module_help}\"))'"
   The ‘sit-for’ hack is needed for emacs versions older than 25.x.  It
was reported in this issue
(https://github.com/kaushalmodi/eless/issues/3).


File: eless.info,  Node: Input is piped from ‘info’ command,  Next: Input is piped from something else,  Prev: Input is piped from a ‘modules’ help in _IPython_,  Up: Output is going to _stdout_ Input is coming from a pipe

7.9.2.3 Input is piped from ‘info’ command
..........................................

     # Try something like `info emacs | eless'.
     # That will launch the Info manual in eless.
     debug "Info Manual = ${info_man}"

     cmd="emacs_Q_view_mode \
                  ${emacs_args[*]} \
                  --eval '(progn
                            (info (downcase \"${info_man}\")))'"


File: eless.info,  Node: Input is piped from something else,  Prev: Input is piped from ‘info’ command,  Up: Output is going to _stdout_ Input is coming from a pipe

7.9.2.4 Input is piped from something else
..........................................

This scenario could be anything, like:
     diff a b | eless
     grep 'foo' bar | eless
     ls --color=always | eless

   In that case, just open the ‘${tempfile}’ saved from the ‘STDIN’
stream using ‘emacs_Q_view_mode’.
     debug "No man page or info manual detected"

     cmd="emacs_Q_view_mode ${tempfile} \
                  ${emacs_args[*]} \
                  --eval '(progn
                            (set-visited-file-name nil)
                            (rename-buffer \"*Stdin*\" :unique))'"


File: eless.info,  Node: Output is going to _stdout_ Input is an argument to the script,  Prev: Output is going to _stdout_ Input is coming from a pipe,  Up: Input/Output Scenarios

7.9.3 Output is going to _stdout_, Input is an argument to the script
---------------------------------------------------------------------

     cmd="emacs_Q_view_mode ${emacs_args[*]}"


File: eless.info,  Node: Eval,  Next: Emacs Configuration,  Prev: Input/Output Scenarios,  Up: Code

7.10 Eval
=========

Finally we ‘eval’ the constructed ‘${cmd}’ variable.
     debug "Eless Command : $cmd"

     eval "$cmd"


File: eless.info,  Node: Emacs Configuration,  Prev: Eval,  Up: Code

7.11 Emacs Configuration
========================

Here is a “Do The Right Thing” config for ‘view-mode’ that gets loaded
in the emacs instance launched in the *note ‘emacs_Q_view_mode’
function: Emacs with ‘-Q’ in ‘view-mode’.

* Menu:

* General setup::
* Ido setup::
* Isearch setup::
* Enable line truncation::
* Highlight the current line::
* Custom functions::
* Auto-setting of major modes::
* Key bindings::
* User config override::


File: eless.info,  Node: General setup,  Next: Ido setup,  Up: Emacs Configuration

7.11.1 General setup
--------------------

     ;; Keep the default-directory to be the same from where
     ;; this script was launched from; useful during C-x C-f
     (setq default-directory "'"$(pwd)"'/")

     ;; No clutter
     (menu-bar-mode -1)
     (if (fboundp (function tool-bar-mode)) (tool-bar-mode -1))

     ;; Show line and column numbers in the mode-line
     (line-number-mode 1)
     (column-number-mode 1)

     (setq-default indent-tabs-mode nil) ;Use spaces instead of tabs for indentation
     (setq x-select-enable-clipboard t)
     (setq x-select-enable-primary t)
     (setq save-interprogram-paste-before-kill t)
     (setq require-final-newline t)
     (setq visible-bell t)
     (setq load-prefer-newer t)
     (setq ediff-window-setup-function (function ediff-setup-windows-plain))

     (setq org-src-fontify-natively t)       ;Syntax-highlight source blocks in org

     (fset (quote yes-or-no-p) (quote y-or-n-p)) ;Use y or n instead of yes or no


File: eless.info,  Node: Ido setup,  Next: Isearch setup,  Prev: General setup,  Up: Emacs Configuration

7.11.2 Ido setup
----------------

     (setq ido-save-directory-list-file nil) ;Do not save ido history
     (ido-mode 1)
     (setq ido-enable-flex-matching t)       ;Enable fuzzy search
     (setq ido-everywhere t)
     (setq ido-create-new-buffer (quote always)) ;Create a new buffer if no buffer matches substringv
     (setq ido-use-filename-at-point (quote guess)) ;Find file at point using ido
     (add-to-list (quote ido-ignore-buffers) "*Messages*")


File: eless.info,  Node: Isearch setup,  Next: Enable line truncation,  Prev: Ido setup,  Up: Emacs Configuration

7.11.3 Isearch setup
--------------------

     (setq isearch-allow-scroll t) ;Allow scrolling using isearch
     ;; DEL during isearch should edit the search string, not jump back to the previous result.
     (define-key isearch-mode-map [remap isearch-delete-char] (function isearch-del-char))


File: eless.info,  Node: Enable line truncation,  Next: Highlight the current line,  Prev: Isearch setup,  Up: Emacs Configuration

7.11.4 Enable line truncation
-----------------------------

     ;; Truncate long lines by default
     (setq truncate-partial-width-windows nil) ;Respect the value of truncate-lines
     (toggle-truncate-lines +1)


File: eless.info,  Node: Highlight the current line,  Next: Custom functions,  Prev: Enable line truncation,  Up: Emacs Configuration

7.11.5 Highlight the current line
---------------------------------

     (global-hl-line-mode 1)


File: eless.info,  Node: Custom functions,  Next: Auto-setting of major modes,  Prev: Highlight the current line,  Up: Emacs Configuration

7.11.6 Custom functions
-----------------------

* Menu:

* Keep/delete matching lines::
* Frame and font re-sizing::
* Revert buffer in ‘view-mode’::
* Detect if ‘diff-mode’ should be enabled::
* Detect if ANSI codes need to be converted to colors::
* ``Do The Right Thing'' Kill::
* ‘dired-mode’ setup::
* ‘Man-mode’ setup::
* ‘Info-mode’ setup::
* ‘tar-mode’ setup::


File: eless.info,  Node: Keep/delete matching lines,  Next: Frame and font re-sizing,  Up: Custom functions

7.11.6.1 Keep/delete matching lines
...................................

     (defun eless/keep-lines ()
       (interactive)
       (let ((inhibit-read-only t)) ;Ignore read-only status of buffer
         (save-excursion
           (goto-char (point-min))
           (call-interactively (function keep-lines)))))

     (defun eless/delete-matching-lines ()
       (interactive)
       (let ((inhibit-read-only t)) ;Ignore read-only status of buffer
         (save-excursion
           (goto-char (point-min))
           (call-interactively (function delete-matching-lines)))))


File: eless.info,  Node: Frame and font re-sizing,  Next: Revert buffer in ‘view-mode’,  Prev: Keep/delete matching lines,  Up: Custom functions

7.11.6.2 Frame and font re-sizing
.................................

     (defun eless/frame-width-half (double)
       (interactive "P")
       (let ((frame-resize-pixelwise t) ;Do not round frame sizes to character h/w
             (factor (if double 2 0.5)))
         (set-frame-size nil (round (* factor (frame-text-width))) (frame-text-height) :pixelwise)))
     (defun eless/frame-width-double ()
       (interactive)
       (eless/frame-width-half :double))

     (defun eless/frame-height-half (double)
       (interactive "P")
       (let ((frame-resize-pixelwise t) ;Do not round frame sizes to character h/w
             (factor (if double 2 0.5)))
         (set-frame-size nil  (frame-text-width) (round (* factor (frame-text-height))) :pixelwise)))
     (defun eless/frame-height-double ()
       (interactive)
       (eless/frame-height-half :double))


File: eless.info,  Node: Revert buffer in ‘view-mode’,  Next: Detect if ‘diff-mode’ should be enabled,  Prev: Frame and font re-sizing,  Up: Custom functions

7.11.6.3 Revert buffer in ‘view-mode’
.....................................

     (defun eless/revert-buffer-retain-view-mode ()
       (interactive)
       (let ((view-mode-state view-mode)) ;save the current state of view-mode
         (revert-buffer)
         (when view-mode-state
           (view-mode 1))))


File: eless.info,  Node: Detect if ‘diff-mode’ should be enabled,  Next: Detect if ANSI codes need to be converted to colors,  Prev: Revert buffer in ‘view-mode’,  Up: Custom functions

7.11.6.4 Detect if ‘diff-mode’ should be enabled
................................................

     (defun eless/enable-diff-mode-maybe ()
       (let* ((max-line 10)                ;Search first MAX-LINE lines of the buffer
              (bound (save-excursion
                       (goto-char (point-min))
                       (forward-line max-line)
                       (point))))
         (save-excursion
           (let ((diff-mode-enable))
             (goto-char (point-min))
             (when (and ;First header line of unified/context diff begins with "--- "/"*** "
                    (thing-at-point (quote line)) ;Prevent error in string-match if the buffer is empty
                    (string-match "^\\(---\\|\\*\\*\\*\\) " (thing-at-point (quote line)))
                    ;; Second header line of unified/context diff begins with "+++ "/"--- "
                    (progn
                      (forward-line 1)
                      (string-match "^\\(\\+\\+\\+\\|---\\) " (thing-at-point (quote line)))))
               (setq diff-mode-enable t))
             ;; Check if the diff format is neither context nor unified
             (unless diff-mode-enable
               (goto-char (point-min))
               (when (re-search-forward "^\\(?:[0-9]+,\\)?[0-9]+\\(?1:[adc]\\)\\(?:[0-9]+,\\)?[0-9]+$" bound :noerror)
                 (forward-line 1)
                 (let ((diff-type (match-string-no-properties 1)))
                   (cond
                    ;; Line(s) added
                    ((string= diff-type "a")
                     (when (re-search-forward "^> " nil :noerror)
                       (setq diff-mode-enable t)))
                    ;; Line(s) deleted or changed
                    (t
                     (when (re-search-forward "^< " nil :noerror)
                       (setq diff-mode-enable t)))))))
             (when diff-mode-enable
               (message "Auto-enabling diff-mode")
               (diff-mode)
               (rename-buffer "*Diff*" :unique)
               (view-mode 1))))))            ;Re-enable view-mode

  1. Enable ‘whitespace-mode’ in ‘diff-mode’

     Enable ‘whitespace-mode’ to easily detect presence of tabs and
     trailing spaces in diffs.
          (setq whitespace-style
                (quote (face                      ;Enable all visualization via faces
                        trailing                  ;Show white space at end of lines
                        tabs                      ;Show tabs using faces
                        spaces space-mark         ;space-mark shows spaces as dots
                        space-before-tab space-after-tab ;mix of tabs and spaces
                        indentation))) ;Highlight spaces/tabs at BOL depending on indent-tabs-mode
          (add-hook (quote diff-mode-hook) (function whitespace-mode))


File: eless.info,  Node: Detect if ANSI codes need to be converted to colors,  Next: ``Do The Right Thing'' Kill,  Prev: Detect if ‘diff-mode’ should be enabled,  Up: Custom functions

7.11.6.5 Detect if ANSI codes need to be converted to colors
............................................................

     (defun eless/enable-ansi-color-maybe ()
       (save-excursion
         (let* ((max-line 100) ;Search first MAX-LINE lines of the buffer
                (bound (progn
                         (goto-char (point-min))
                         (forward-line max-line)
                         (point)))
                (ESC "\u001b")
                ;; Example ANSI codes: ^[[0;36m, or ^[[0m where ^[ is the ESC char
                (ansi-regexp (concat ESC "\\[" "[0-9]+\\(;[0-9]+\\)*m")))
           (goto-char (point-min))
           (when (re-search-forward ansi-regexp bound :noerror)
             (let ((inhibit-read-only t)) ;Ignore read-only status of buffer
               (message "Auto-converting ANSI codes to colors")
               (require (quote ansi-color))
               (ansi-color-apply-on-region (point-min) (point-max)))))))


File: eless.info,  Node: ``Do The Right Thing'' Kill,  Next: ‘dired-mode’ setup,  Prev: Detect if ANSI codes need to be converted to colors,  Up: Custom functions

7.11.6.6 “Do The Right Thing” Kill
..................................

Before killing emacs, loop through all the buffers and mark all the
‘view-mode’ buffers as being unmodified (regardless of if they actually
were).  The ‘view-mode’ buffers would have been auto-marked as modified
if filtering commands like ‘eless/delete-matching-lines’,
‘eless/keep-lines’, etc.  were used.

   By overriding the state of these buffers as being unmodified, we are
saved from emacs prompting to save those modified ‘view-mode’ buffers at
the time of quitting.
     (defun eless/kill-emacs-or-buffer (&optional kill-emacs)
       (interactive "P")
       (let ((num-non-special-buffers 0))
         (dolist (buf (buffer-list))
           (unless (string-match "\\`[ *]" (buffer-name buf)) ;Do not count buffers with names starting with space or *
             (setq num-non-special-buffers (+ 1 num-non-special-buffers)))
           (with-current-buffer buf
             ;; Mark all view-mode buffers as "not modified" to prevent save prompt on
             ;; quitting.
             (when view-mode
               (set-buffer-modified-p nil)
               (when (local-variable-p (quote kill-buffer-hook))
                 (setq kill-buffer-hook nil)))))
         (if (or kill-emacs
                 (<= num-non-special-buffers 1))
             (save-buffers-kill-emacs)
           (kill-buffer (current-buffer))))) ;Else only kill the current buffer

     (defun eless/save-buffers-maybe-and-kill-emacs ()
       (interactive)
       (eless/kill-emacs-or-buffer :kill-emacs))


File: eless.info,  Node: ‘dired-mode’ setup,  Next: ‘Man-mode’ setup,  Prev: ``Do The Right Thing'' Kill,  Up: Custom functions

7.11.6.7 ‘dired-mode’ setup
...........................

     (defun eless/dired-mode-customization ()
       ;; dired-find-file is bound to "f" and "RET" by default
       ;; So changing the "RET" binding to dired-view-file so that the file opens
       ;; in view-mode in the spirit of eless.
       (define-key dired-mode-map (kbd "RET") (function dired-view-file))
       (define-key dired-mode-map (kbd "E") (function wdired-change-to-wdired-mode))
       (define-key dired-mode-map (kbd "Q") (function quit-window))
       (define-key dired-mode-map (kbd "q") (function eless/kill-emacs-or-buffer)))
     (add-hook (quote dired-mode-hook) (function eless/dired-mode-customization))


File: eless.info,  Node: ‘Man-mode’ setup,  Next: ‘Info-mode’ setup,  Prev: ‘dired-mode’ setup,  Up: Custom functions

7.11.6.8 ‘Man-mode’ setup
.........................

     (defun eless/Man-mode-customization ()
       (define-key Man-mode-map (kbd "Q") (function quit-window))
       (define-key Man-mode-map (kbd "q") (function eless/kill-emacs-or-buffer)))
     (add-hook (quote Man-mode-hook) (function eless/Man-mode-customization))


File: eless.info,  Node: ‘Info-mode’ setup,  Next: ‘tar-mode’ setup,  Prev: ‘Man-mode’ setup,  Up: Custom functions

7.11.6.9 ‘Info-mode’ setup
..........................

     (defun eless/Info-mode-customization ()
       (define-key Info-mode-map (kbd "Q") (function quit-window))
       (define-key Info-mode-map (kbd "q") (function eless/kill-emacs-or-buffer)))
     (add-hook (quote Info-mode-hook) (function eless/Info-mode-customization))


File: eless.info,  Node: ‘tar-mode’ setup,  Prev: ‘Info-mode’ setup,  Up: Custom functions

7.11.6.10 ‘tar-mode’ setup
..........................

When ‘eless’ is passed an archive file as an argument, the ‘tar-mode’ is
enabled automatically that will do the job of showing the archive
contents, extracting and viewing them.
     eless foo.tar.xz
     eless bar.tar.gz
     (defun eless/tar-mode-customization ()
       (define-key tar-mode-map (kbd "RET") (function tar-view))
       (define-key tar-mode-map (kbd "Q") (function quit-window))
       (define-key tar-mode-map (kbd "q") (function eless/kill-emacs-or-buffer)))
     (add-hook (quote tar-mode-hook) (function eless/tar-mode-customization))


File: eless.info,  Node: Auto-setting of major modes,  Next: Key bindings,  Prev: Custom functions,  Up: Emacs Configuration

7.11.7 Auto-setting of major modes
----------------------------------

     (cond
      ((derived-mode-p (quote dired-mode)) (eless/dired-mode-customization))
      ((derived-mode-p (quote Man-mode)) (eless/Man-mode-customization))
      ((derived-mode-p (quote Info-mode)) (eless/Info-mode-customization))
      ((derived-mode-p (quote tar-mode)) (eless/tar-mode-customization))
      (t     ;Enable view-mode if none of the above major-modes are active
       ;; Auto-enable diff-mode. For example, when doing "diff foo bar | eless"
       (eless/enable-diff-mode-maybe)
       ;; Auto-convert ANSI codes to colors. For example, when doing "ls --color=always | eless"
       (eless/enable-ansi-color-maybe)
       (view-mode 1)))


File: eless.info,  Node: Key bindings,  Next: User config override,  Prev: Auto-setting of major modes,  Up: Emacs Configuration

7.11.8 Key bindings
-------------------

     (eval-after-load (quote view)
       (quote
        (progn
          (define-key view-mode-map (kbd "!") (function eless/delete-matching-lines))
          (define-key view-mode-map (kbd "&") (function eless/keep-lines))
          (define-key view-mode-map (kbd "0") (function delete-window))
          (define-key view-mode-map (kbd "1") (function delete-other-windows))
          (define-key view-mode-map (kbd "A") (function auto-revert-tail-mode))
          (define-key view-mode-map (kbd "D") (function dired))
          (define-key view-mode-map (kbd "N") (function next-error)) ;Next line in *occur*
          (define-key view-mode-map (kbd "P") (function previous-error)) ;Previous line in *occur*
          (define-key view-mode-map (kbd "K") (function eless/delete-matching-lines))
          (define-key view-mode-map (kbd "a") (function auto-revert-mode))
          (define-key view-mode-map (kbd "g") (function eless/revert-buffer-retain-view-mode))
          (define-key view-mode-map (kbd "k") (function eless/keep-lines))
          (define-key view-mode-map (kbd "n") (function next-line))
          (define-key view-mode-map (kbd "o") (function occur))
          (define-key view-mode-map (kbd "p") (function previous-line))
          (define-key view-mode-map (kbd "q") (function eless/kill-emacs-or-buffer))
          (define-key view-mode-map (kbd "t") (function toggle-truncate-lines)))))

     ;; Global custom bindings
     (global-set-key (kbd "M-/") (function hippie-expand))
     (global-set-key (kbd "C-x C-b") (function ibuffer))
     (global-set-key (kbd "C-x C-c") (function eless/save-buffers-maybe-and-kill-emacs))
     (global-set-key (kbd "C-x C-f") (function view-file))
     (global-set-key (kbd "C-c q") (function query-replace-regexp))
     (global-set-key (kbd "<f5>") (function eless/revert-buffer-retain-view-mode))

     (when (display-graphic-p)
       (define-key view-mode-map (kbd "+") (function text-scale-adjust))
       (define-key view-mode-map (kbd "-") (function text-scale-adjust))
       (define-key view-mode-map (kbd "=") (function text-scale-adjust))
       (global-set-key (kbd "C-<right>") (function eless/frame-width-double))
       (global-set-key (kbd "C-<left>") (function eless/frame-width-half))
       (global-set-key (kbd "C-<down>") (function eless/frame-height-double))
       (global-set-key (kbd "C-<up>") (function eless/frame-height-half)))


File: eless.info,  Node: User config override,  Prev: Key bindings,  Up: Emacs Configuration

7.11.9 User config override
---------------------------

If an ‘elesscfg’ file is present in the ‘user-emacs-directory’ (default
value is ‘~/.emacs.d/’), load that.  As the user can be using that file
to set their favorite theme (or not set one), the ‘eless’ default theme
is not loaded if that file is present.

   User can further choose to re-define any of the above functions or
key-bindings in this file.
     (unless (load (locate-user-emacs-file "elesscfg") :noerror)
       (load-theme (quote tango-dark) :no-confirm)
       ;; The tango-dark theme is good except for the bright yellow hl-line face
       (custom-theme-set-faces
        (quote user)
        (quote (hl-line ((t (:background "color-238")))))))


File: eless.info,  Node: Contributing,  Next: Other Wikis,  Prev: Code,  Up: Top

8 Contributing
**************

This guide is for you if you’d like to do any of the below:
   • Open an issue (plus provide debug information).
   • Simply clone this repo and build ‘eless’ locally.
   • Do above + Provide a PR.

* Menu:

* How to help debug::
* Development::


File: eless.info,  Node: How to help debug,  Next: Development,  Up: Contributing

8.1 How to help debug
=====================

   • If you find ‘eless’ not working as expected, file an issue
     (https://github.com/kaushalmodi/eless/issues).
   • Include the following debug information:
       1. ‘emacs --version’
       2. ‘eless’ debug info:
             • Append the ‘-D’ option to your ‘eless’ use case.
               Examples:
                  • ‘eless foo -D’
                  • ‘info org | eless -D’
             • If you are providing debug info for something like ‘man
               foo’, do
                  • ‘PAGER=​"eless -D" man foo’


File: eless.info,  Node: Development,  Prev: How to help debug,  Up: Contributing

8.2 Development
===============

* Menu:

* Preparation::
* To build ‘eless’ and documentation::
* To build documentation::
* Submitting PR::


File: eless.info,  Node: Preparation,  Next: To build ‘eless’ and documentation,  Up: Development

8.2.1 Preparation
-----------------

This project builds *everything* from the ‘eless.org’ file — the ‘eless’
Bash script _plus_ all the HTML (https://kaushalmodi.github.io/eless/),
Info documentation, ‘README.org’, ‘CONTRIBUTING.org’, and even the Wiki
pages.  So before your proceed, you also need to:
     cd docs/
     git clone https://github.com/kaushalmodi/eless.wiki.git


File: eless.info,  Node: To build ‘eless’ and documentation,  Next: To build documentation,  Prev: Preparation,  Up: Development

8.2.2 To build ‘eless’ and documentation
----------------------------------------

     make eless

* Menu:

* Sanity check of the tangled ‘eless’::


File: eless.info,  Node: Sanity check of the tangled ‘eless’,  Up: To build ‘eless’ and documentation

8.2.2.1 Sanity check of the tangled ‘eless’
...........................................

Run the tangled ‘eless’ through shellcheck (http://www.shellcheck.net/)
to ensure that there are no errors.


File: eless.info,  Node: To build documentation,  Next: Submitting PR,  Prev: To build ‘eless’ and documentation,  Up: Development

8.2.3 To build documentation
----------------------------

     make doc

* Menu:

* Understand the changes::


File: eless.info,  Node: Understand the changes,  Up: To build documentation

8.2.3.1 Understand the changes
..............................

   • The randomly generated hyperlinks and section numbers in the Info
     document and HTML will be different.
   • Other than that, you shouldn’t see any unexpected changes.


File: eless.info,  Node: Submitting PR,  Prev: To build documentation,  Up: Development

8.2.4 Submitting PR
-------------------

   • You can submit a PR once you have reviewed all the changes in the
     tangled ‘eless’ script and documentation.
   • If changes are only to the Wiki, I believe you can push them
     directly using ‘git’ or manually edit those here
     (https://github.com/kaushalmodi/eless/wiki).  _I have to yet figure
     out how to keep the non-git Wiki changes and changes in ‘eless.org’
     in sync._


File: eless.info,  Node: Other Wikis,  Prev: Contributing,  Up: Top

9 Other Wikis
*************

* Menu:

* Home::
* Example ‘eless’ config in ‘tcsh’::


File: eless.info,  Node: Home,  Next: Example ‘eless’ config in ‘tcsh’,  Up: Other Wikis

9.1 Home
========

This project in unique in the sense that *everything* is built from
‘eless.org’ file, the ‘eless’ script _plus_ all the HTML, Info
documentation, ‘README.org’, ‘CONTRIBUTING.org’, and even these Wiki
pages.

   So before running ‘make doc’ as mentioned in the Contributing Guide
(https://github.com/kaushalmodi/eless/blob/master/CONTRIBUTING.org), you
need to:
     cd docs/
     git clone https://github.com/kaushalmodi/eless.wiki.git

   If changes are only to this Wiki, I believe you can push them
directly using ‘git’ or manually edit those here.

   _I have to yet figure out how to sync those manual Wiki changes with
‘eless.org’._


File: eless.info,  Node: Example ‘eless’ config in ‘tcsh’,  Prev: Home,  Up: Other Wikis

9.2 Example ‘eless’ config in ‘tcsh’
====================================

     setenv PAGER eless # Show man pages using eless

     alias info  '\info \!* | eless'

     alias diff  '\diff \!* | eless'
     alias diffg '\diff \!* | eless --gui'

     alias ev eless



Tag Table:
Node: Top188
Node: Readme2351
Node: Requirements5185
Node: Try it out5825
Node: Contributors7182
Node: Eless Options7641
Node: ‘view-mode’ Common Bindings7971
Node: Custom Bindings8961
Node: Usage Examples10002
Node: Current ‘eless’ Version11539
Node: Code11931
Node: Unofficial Bash Strict Mode12324
Node: Initialize variables13009
Node: Cleanup using ‘trap’13413
Node: Debug function14029
Node: Input/Output Detection15181
Node: Parse options16864
Node: Print Help18583
Node: Emacs with ‘-Q’ in ‘view-mode’18928
Node: Input/Output Scenarios19755
Node: Output is going to a pipe21198
Node: Output is going to _stdout_ Input is coming from a pipe21744
Node: Input is piped from ‘man’ command24684
Node: Input is piped from a ‘modules’ help in _IPython_25904
Node: Input is piped from ‘info’ command27153
Node: Input is piped from something else27782
Node: Output is going to _stdout_ Input is an argument to the script28562
Node: Eval28934
Node: Emacs Configuration29172
Node: General setup29706
Node: Ido setup30773
Node: Isearch setup31343
Node: Enable line truncation31757
Node: Highlight the current line32108
Node: Custom functions32344
Node: Keep/delete matching lines32881
Node: Frame and font re-sizing33571
Node: Revert buffer in ‘view-mode’34590
Node: Detect if ‘diff-mode’ should be enabled35077
Node: Detect if ANSI codes need to be converted to colors38137
Node: ``Do The Right Thing'' Kill39302
Node: ‘dired-mode’ setup41061
Node: ‘Man-mode’ setup41893
Node: ‘Info-mode’ setup42354
Node: ‘tar-mode’ setup42820
Node: Auto-setting of major modes43547
Node: Key bindings44408
Node: User config override46999
Node: Contributing47831
Node: How to help debug48205
Node: Development48917
Node: Preparation49149
Node: To build ‘eless’ and documentation49652
Node: Sanity check of the tangled ‘eless’49946
Node: To build documentation50265
Node: Understand the changes50514
Node: Submitting PR50841
Node: Other Wikis51389
Node: Home51553
Node: Example ‘eless’ config in ‘tcsh’52340

End Tag Table


Local Variables:
coding: utf-8
End:
